import telebot
from telebot import types
import requests
import os
from operator import itemgetter

BOT_TOKEN = "7974655972:AAFLmCVwL7amk7B8uQW3UmGP7616GKR8HHY"
CMC_API_KEY = "680f73b1-591c-4d53-817c-d0882ba12253"

bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å CoinMarketCap
def load_coin_map():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/map"
    headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
    response = requests.get(url, headers=headers)
    coins = response.json()["data"]
    symbol_map = {}
    for coin in coins:
        name = coin["name"].lower()
        symbol = coin["symbol"].upper()
        symbol_map[name] = symbol
        symbol_map[symbol.lower()] = symbol  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–æ–∂–µ
    return symbol_map

coin_map = load_coin_map()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("/topgainers")
    btn2 = types.KeyboardButton("/toplosers")
    btn3 = types.KeyboardButton("BTC")
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        message.chat.id,
        "üëã –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç—Ñ–∏—Ä–∏—É–º, btc, sol)\n\nüìç –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:",
        reply_markup=markup
    )



# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text.strip().lower()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
    if text.startswith('/'):
        return

    symbol = find_symbol(text)  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç—ã
    if symbol:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton(f"info{symbol.upper()}")
        markup.add(btn)
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {symbol.upper()}.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≠—Ñ–∏—Ä–∏—É–º, –ë–∏—Ç–∫–æ–∏–Ω, –°–æ–ª–∞–Ω–∞)")


@bot.callback_query_handler(func=lambda call: call.data.startswith("info_"))
def handle_info(call):
    symbol = call.data.split("_")[1]
    try:
        url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        params = {"symbol": symbol, "convert": "USDT"}

        r = requests.get(url, headers=headers, params=params)
        data = r.json()["data"][symbol]["quote"]["USDT"]

        price = data["price"]
        cap = data["market_cap"] / 1_000_000_000  # –≤ –º–∏–ª–ª–∏–∞—Ä–¥–∞—Ö
        change = data["percent_change_24h"]

        fear_greed = ""
        if symbol == "BTC":
            fng = requests.get("https://api.alternative.me/fng/?limit=30").json()["data"]
            index = round(sum([int(x["value"]) for x in fng]) / len(fng), 1)
            fear_greed = f"\n‚Ä¢ üß† –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ (30–¥): *{index}/100*"

        msg = (
            f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {symbol} (–≤ USDT)*\n"
            f"‚Ä¢ üíµ –¶–µ–Ω–∞: *${price:.5f}*\n"
            f"‚Ä¢ üí∞ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${cap:.5f}B*\n"
            f"‚Ä¢ üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{change:.2f}%*"
            + fear_greed
        )

        bot.send_message(call.message.chat.id, msg, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {symbol}: {e}")

def get_top_movers(direction="gainers", limit=10):
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
    headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
    params = {
        "convert": "USDT",
        "limit": 100  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 100 –º–æ–Ω–µ—Ç ‚Äî –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±–µ–∑ Pro-–∞–∫–∫–∞—É–Ω—Ç–∞
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()["data"]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: –ª–∏–±–æ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –ª–∏–±–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        sorted_data = sorted(
            data,
            key=lambda x: x["quote"]["USDT"]["percent_change_24h"],
            reverse=(direction == "gainers")
        )

        top = sorted_data[:limit]

        lines = []
        for coin in top:
            name = coin["name"]
            symbol = coin["symbol"]
            price = coin["quote"]["USDT"]["price"]
            change = coin["quote"]["USDT"]["percent_change_24h"]
            emoji = "üìà" if change >= 0 else "üìâ"
            lines.append(f"{emoji} *{symbol}* ‚Äî ${price:.5f} ({change:.2f}%)")

        return "\n".join(lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç—Ñ–∏—Ä–∏—É–º, btc, sol)")
    bot.send_message(message.chat.id, "üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/topgainers ‚Äî –ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞\n/toplosers ‚Äî –ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è\n\n–¢–∞–∫–∂–µ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã ‚Äî –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
