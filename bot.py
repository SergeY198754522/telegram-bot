import telebot
from telebot import types
import requests
import os

BOT_TOKEN = "7974655972:AAFLmCVwL7amk7B8uQW3UmGP7616GKR8HHY"
CMC_API_KEY = "680f73b1-591c-4d53-817c-d0882ba12253"

bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_coin_map():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/map"
    headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
    response = requests.get(url, headers=headers)
    coins = response.json()["data"]
    name_to_symbol = {}
    for coin in coins:
        name = coin["name"].lower()
        symbol = coin["symbol"].upper()
        name_to_symbol[name] = symbol
    return name_to_symbol

# –°–ª–æ–≤–∞—Ä—å –∏–º—è –º–æ–Ω–µ—Ç—ã ‚Üí —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–æ–ª–∞–Ω–∞" ‚Üí "SOL")
coin_map = load_coin_map()

# /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≠—Ñ–∏—Ä–∏—É–º, –°–æ–ª–∞–Ω–∞)")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫—É info
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text.strip().lower()

    for name in coin_map:
        if text == name:
            symbol = coin_map[name]
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton(f"info{symbol}", callback_data=f"info_{symbol}")
            markup.add(btn)
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {name.title()}.", reply_markup=markup)
            return

    bot.send_message(message.chat.id, "‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≠—Ñ–∏—Ä–∏—É–º, –ë–∏—Ç–∫–æ–∏–Ω, –°–æ–ª–∞–Ω–∞)")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ info_SYMBOL
@bot.callback_query_handler(func=lambda call: call.data.startswith("info_"))
def handle_info(call):
    symbol = call.data.split("_")[1]
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        params = {"symbol": symbol, "convert": "USD"}

        r = requests.get(url, headers=headers, params=params)
        data = r.json()["data"][symbol]["quote"]["USD"]

        price = round(data["price"], 2)
        cap = round(data["market_cap"] / 1_000_000_000, 2)
        change = round(data["percent_change_24h"], 2)

        # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è BTC
        fear_greed = ""
        if symbol == "BTC":
            fng = requests.get("https://api.alternative.me/fng/?limit=30").json()["data"]
            index = round(sum([int(x["value"]) for x in fng]) / len(fng), 1)
            fear_greed = f"\n‚Ä¢ üß† –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ (30–¥): *{index}/100*"

        msg = (
            f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {symbol}*\n"
            f"‚Ä¢ üíµ –¶–µ–Ω–∞: *${price}*\n"
            f"‚Ä¢ üí∞ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${cap}B*\n"
            f"‚Ä¢ üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{change}%*"
            + fear_greed
        )

        bot.send_message(call.message.chat.id, msg, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

bot.polling()
